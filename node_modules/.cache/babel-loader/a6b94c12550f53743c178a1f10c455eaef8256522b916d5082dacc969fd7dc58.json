{"ast":null,"code":"import userEvent from '@testing-library/user-event';\nimport { useState } from 'react';\nexport default class BoxClass {\n  constructor(i, j) {\n    this.left = true;\n    this.right = true;\n    this.top = true;\n    this.bottom = true;\n    this.i = i;\n    this.j = j;\n  }\n}\nclass Point {}\nexport function setGridElement(newBox, boxes, i, j, setBoxes) {\n  setBoxes(boxes.map(row => row.id === i ? row.map(el => el.id === j ? newBox : el) : row));\n}\n;\nexport const initBoxes = () => {\n  var grid = [];\n  for (let i = 0; i < 10; i++) {\n    grid[i] = [];\n    for (let j = 0; j < 10; j++) {\n      grid[i][j] = new BoxClass(i, j);\n    }\n  }\n  return grid;\n};\nexport const generateMaze = boxes => {\n  // let entrance = Math.floor(Math.random()*10);\n  // let exit = Math.floor(Math.random()*10);\n  let entrance = [9, 9];\n  let exit = [0, 0];\n  let currPoint = entrance;\n  let points = [[7, 8], [8, 2], [3, 7], [4, 2]];\n  // let pointsX = [7,8,3,4];\n  // let pointsY = [8,2,7,2];\n  for (let i = 0; i < 4; i++) {\n    // map to each point\n    while (true) {\n      distanceX = currPoint[0] - points[i][0];\n      distanceY = currPoint[1] - points[i][1];\n      let distance = Math.abs(distanceX) + Math.abs(distanceY);\n      let randNum = Math.random();\n      let direction;\n      if (distanceX == 0) {} else if (distanceY == 0) {} else {}\n    }\n  }\n};","map":{"version":3,"names":["userEvent","useState","BoxClass","constructor","i","j","left","right","top","bottom","Point","setGridElement","newBox","boxes","setBoxes","map","row","id","el","initBoxes","grid","generateMaze","entrance","exit","currPoint","points","distanceX","distanceY","distance","Math","abs","randNum","random","direction"],"sources":["/Users/dominicparolin/Code/maze/src/components/calc.js"],"sourcesContent":["import userEvent from '@testing-library/user-event';\nimport {useState} from 'react';\n\nexport default class BoxClass {\n  constructor(i, j) {\n    this.left = true;\n    this.right = true;\n    this.top = true;\n    this.bottom = true;\n    this.i = i;\n    this.j = j;\n  }\n}\n\nclass Point {\n\n}\n\nexport function setGridElement(newBox, boxes, i, j, setBoxes) {\n   setBoxes(boxes.map((row) => (\n      (row.id === i) ?\n         row.map((el) => ( (el.id === j) ? newBox : el))\n      :\n      row\n   ))\n)};\n\n\nexport const initBoxes = () => {\n   var grid = [];\n   for (let i = 0; i < 10; i++) {\n      grid[i]=[];\n      for (let j = 0; j < 10; j++) {\n         grid[i][j] = new BoxClass(i,j);\n      }      \n   }\n   return grid;\n}\n\nexport const generateMaze = (boxes) =>{\n   // let entrance = Math.floor(Math.random()*10);\n   // let exit = Math.floor(Math.random()*10);\n   let entrance = [9,9];\n   let exit = [0,0];\n   let currPoint = entrance;\n   let points = [[7,8], [8,2], [3,7], [4,2] ];\n   // let pointsX = [7,8,3,4];\n   // let pointsY = [8,2,7,2];\n   for (let i = 0; i < 4; i++) {\n      // map to each point\n      while(true){\n         distanceX = currPoint[0]-points[i][0];\n         distanceY = currPoint[1]-points[i][1];\n\n         let distance = Math.abs(distanceX) + Math.abs(distanceY);\n         let randNum = Math.random();\n         let direction \n\n\n         if(distanceX == 0){\n         \n         } else if(distanceY ==0){\n\n         } else{\n\n\n         }\n      }\n      \n   }\n\n\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,6BAA6B;AACnD,SAAQC,QAAQ,QAAO,OAAO;AAE9B,eAAe,MAAMC,QAAQ,CAAC;EAC5BC,WAAW,CAACC,CAAC,EAAEC,CAAC,EAAE;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,GAAG,GAAG,IAAI;IACf,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACL,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACZ;AACF;AAEA,MAAMK,KAAK,CAAC;AAIZ,OAAO,SAASC,cAAc,CAACC,MAAM,EAAEC,KAAK,EAAET,CAAC,EAAEC,CAAC,EAAES,QAAQ,EAAE;EAC3DA,QAAQ,CAACD,KAAK,CAACE,GAAG,CAAEC,GAAG,IACnBA,GAAG,CAACC,EAAE,KAAKb,CAAC,GACVY,GAAG,CAACD,GAAG,CAAEG,EAAE,IAAQA,EAAE,CAACD,EAAE,KAAKZ,CAAC,GAAIO,MAAM,GAAGM,EAAG,CAAC,GAElDF,GACF,CAAC,CACJ;AAAA;AAAC;AAGF,OAAO,MAAMG,SAAS,GAAG,MAAM;EAC5B,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC1BgB,IAAI,CAAChB,CAAC,CAAC,GAAC,EAAE;IACV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1Be,IAAI,CAAChB,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,IAAIH,QAAQ,CAACE,CAAC,EAACC,CAAC,CAAC;IACjC;EACH;EACA,OAAOe,IAAI;AACd,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIR,KAAK,IAAI;EACnC;EACA;EACA,IAAIS,QAAQ,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;EACpB,IAAIC,IAAI,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;EAChB,IAAIC,SAAS,GAAGF,QAAQ;EACxB,IAAIG,MAAM,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,CAAE;EAC1C;EACA;EACA,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzB;IACA,OAAM,IAAI,EAAC;MACRsB,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAACC,MAAM,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC;MACrCuB,SAAS,GAAGH,SAAS,CAAC,CAAC,CAAC,GAACC,MAAM,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC;MAErC,IAAIwB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACJ,SAAS,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACH,SAAS,CAAC;MACxD,IAAII,OAAO,GAAGF,IAAI,CAACG,MAAM,EAAE;MAC3B,IAAIC,SAAS;MAGb,IAAGP,SAAS,IAAI,CAAC,EAAC,CAElB,CAAC,MAAM,IAAGC,SAAS,IAAG,CAAC,EAAC,CAExB,CAAC,MAAK,CAGN;IACH;EAEH;AAGH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}